# Portfolio Services Manager –¥–ª—è Windows
# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("start", "stop", "restart", "status")]
    [string]$Action
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
$BackendPort = 8001
$FrontendPort = 3000
$ProjectPath = Split-Path -Parent $MyInvocation.MyCommand.Path

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function Write-ColoredText {
    param([string]$Text, [string]$Color = "White")
    Write-Host $Text -ForegroundColor $Color
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
function Get-ProcessOnPort {
    param([int]$Port)
    $netstatOutput = netstat -ano | Select-String ":$Port"
    if ($netstatOutput) {
        $pid = ($netstatOutput -split '\s+')[-1]
        return $pid
    }
    return $null
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
function Stop-ProcessOnPort {
    param([int]$Port, [string]$ServiceName)
    $pid = Get-ProcessOnPort -Port $Port
    if ($pid) {
        try {
            Stop-Process -Id $pid -Force
            Write-ColoredText "‚úÖ $ServiceName (PID: $pid) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "Green"
            return $true
        }
        catch {
            Write-ColoredText "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ $ServiceName (PID: $pid)" "Red"
            return $false
        }
    }
    else {
        Write-ColoredText "‚ÑπÔ∏è  $ServiceName –Ω–µ –∑–∞–ø—É—â–µ–Ω" "Yellow"
        return $true
    }
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ backend
function Start-Backend {
    Write-ColoredText "üöÄ –ó–∞–ø—É—Å–∫ Backend..." "Cyan"
    $backendPath = Join-Path $ProjectPath "backend"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    $venvPath = Join-Path $backendPath "venv\Scripts\activate.bat"
    if (-not (Test-Path $venvPath)) {
        Write-ColoredText "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..." "Yellow"
        Set-Location $backendPath
        python -m venv venv
        & $venvPath
        pip install -r requirements.txt
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º backend
    $startInfo = New-Object System.Diagnostics.ProcessStartInfo
    $startInfo.FileName = "cmd.exe"
    $startInfo.Arguments = "/c `"cd /d $backendPath && call venv\Scripts\activate.bat && uvicorn server:app --host 0.0.0.0 --port $BackendPort`""
    $startInfo.UseShellExecute = $true
    $startInfo.WindowStyle = "Minimized"
    
    $process = [System.Diagnostics.Process]::Start($startInfo)
    Start-Sleep 3
    
    if (Get-ProcessOnPort -Port $BackendPort) {
        Write-ColoredText "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $BackendPort" "Green"
        return $true
    }
    else {
        Write-ColoredText "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Backend" "Red"
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ frontend
function Start-Frontend {
    Write-ColoredText "üöÄ –ó–∞–ø—É—Å–∫ Frontend..." "Cyan"
    $frontendPath = Join-Path $ProjectPath "frontend"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
    $nodeModulesPath = Join-Path $frontendPath "node_modules"
    if (-not (Test-Path $nodeModulesPath)) {
        Write-ColoredText "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." "Yellow"
        Set-Location $frontendPath
        yarn install
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º frontend
    $startInfo = New-Object System.Diagnostics.ProcessStartInfo
    $startInfo.FileName = "cmd.exe"
    $startInfo.Arguments = "/c `"cd /d $frontendPath && yarn start`""
    $startInfo.UseShellExecute = $true
    $startInfo.WindowStyle = "Minimized"
    
    $process = [System.Diagnostics.Process]::Start($startInfo)
    Start-Sleep 5
    
    if (Get-ProcessOnPort -Port $FrontendPort) {
        Write-ColoredText "‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $FrontendPort" "Green"
        return $true
    }
    else {
        Write-ColoredText "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Frontend" "Red"
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
function Get-ServicesStatus {
    Write-ColoredText "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:" "Cyan"
    
    $backendPid = Get-ProcessOnPort -Port $BackendPort
    if ($backendPid) {
        Write-ColoredText "‚úÖ Backend: —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: $backendPid, –ø–æ—Ä—Ç: $BackendPort)" "Green"
    }
    else {
        Write-ColoredText "‚ùå Backend: –Ω–µ –∑–∞–ø—É—â–µ–Ω" "Red"
    }
    
    $frontendPid = Get-ProcessOnPort -Port $FrontendPort
    if ($frontendPid) {
        Write-ColoredText "‚úÖ Frontend: —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: $frontendPid, –ø–æ—Ä—Ç: $FrontendPort)" "Green"
    }
    else {
        Write-ColoredText "‚ùå Frontend: –Ω–µ –∑–∞–ø—É—â–µ–Ω" "Red"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HTTP
    try {
        $backendResponse = Invoke-WebRequest -Uri "http://localhost:$BackendPort/api/" -TimeoutSec 5 -UseBasicParsing
        Write-ColoredText "‚úÖ Backend API: –¥–æ—Å—Ç—É–ø–µ–Ω" "Green"
    }
    catch {
        Write-ColoredText "‚ùå Backend API: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" "Red"
    }
    
    try {
        $frontendResponse = Invoke-WebRequest -Uri "http://localhost:$FrontendPort" -TimeoutSec 5 -UseBasicParsing
        Write-ColoredText "‚úÖ Frontend: –¥–æ—Å—Ç—É–ø–µ–Ω" "Green"
    }
    catch {
        Write-ColoredText "‚ùå Frontend: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" "Red"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
Write-ColoredText "üõ†Ô∏è  Portfolio Services Manager" "Magenta"
Write-ColoredText "================================" "Magenta"

switch ($Action.ToLower()) {
    "start" {
        Write-ColoredText "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." "Cyan"
        $backendStarted = Start-Backend
        $frontendStarted = Start-Frontend
        
        if ($backendStarted -and $frontendStarted) {
            Write-ColoredText "`n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" "Green"
            Write-ColoredText "üåê Frontend: http://localhost:$FrontendPort" "White"
            Write-ColoredText "üîó Backend API: http://localhost:$BackendPort/docs" "White"
        }
        else {
            Write-ColoredText "`n‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤" "Red"
        }
    }
    
    "stop" {
        Write-ColoredText "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..." "Cyan"
        Stop-ProcessOnPort -Port $BackendPort -ServiceName "Backend"
        Stop-ProcessOnPort -Port $FrontendPort -ServiceName "Frontend"
        Write-ColoredText "`n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" "Green"
    }
    
    "restart" {
        Write-ColoredText "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." "Cyan"
        Stop-ProcessOnPort -Port $BackendPort -ServiceName "Backend"
        Stop-ProcessOnPort -Port $FrontendPort -ServiceName "Frontend"
        Start-Sleep 2
        Start-Backend
        Start-Frontend
        Write-ColoredText "`n‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω" "Green"
    }
    
    "status" {
        Get-ServicesStatus
    }
}

Write-ColoredText "`n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:" "Yellow"
Write-ColoredText "PowerShell -ExecutionPolicy Bypass -File manage-services.ps1 start" "Gray"
Write-ColoredText "PowerShell -ExecutionPolicy Bypass -File manage-services.ps1 stop" "Gray"
Write-ColoredText "PowerShell -ExecutionPolicy Bypass -File manage-services.ps1 restart" "Gray"
Write-ColoredText "PowerShell -ExecutionPolicy Bypass -File manage-services.ps1 status" "Gray"